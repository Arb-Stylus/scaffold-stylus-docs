"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[396],{4137:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},d="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=s(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:e},p),{},{components:n})):a.createElement(f,i({ref:e},p))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l[d]="string"==typeof t?t:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6239:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(4137));const o={sidebar_position:2},i="useScaffoldWriteContract",l={unversionedId:"hooks/useScaffoldWriteContract",id:"hooks/useScaffoldWriteContract",title:"useScaffoldWriteContract",description:"Use this hook to send a transaction to your smart contract to write data or perform an action.",source:"@site/docs/hooks/useScaffoldWriteContract.md",sourceDirName:"hooks",slug:"/hooks/useScaffoldWriteContract",permalink:"/hooks/useScaffoldWriteContract",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/hooks/useScaffoldWriteContract.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"useScaffoldReadContract",permalink:"/hooks/useScaffoldReadContract"},next:{title:"useScaffoldWatchContractEvent",permalink:"/hooks/useScaffoldWatchContractEvent"}},c={},s=[{value:"Configuration",id:"configuration",level:2},{value:"Configuration",id:"configuration-1",level:2},{value:"Return Values",id:"return-values",level:2}],p={toc:s},d="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usescaffoldwritecontract"},"useScaffoldWriteContract"),(0,r.kt)("p",null,"Use this hook to send a transaction to your smart contract to write data or perform an action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const { writeContractAsync: writeYourContractAsync } = useScaffoldWriteContract({ contractName: "YourContract" });\n')),(0,r.kt)("p",null,"The following configuration options can be passed to the hook:"),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"contractName")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Name of the contract to write to.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"chainId")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Id of the chain the contract lives on. Defaults to ",(0,r.kt)("a",{parentName:"td",href:"/deploying/deploy-nextjs-app#--targetnetworks"},(0,r.kt)("inlineCode",{parentName:"a"},"targetNetworks[0].id")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"writeContractParams")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"wagmi's ",(0,r.kt)("inlineCode",{parentName:"td"},"useWriteContract")," hook ",(0,r.kt)("a",{parentName:"td",href:"https://wagmi.sh/react/api/hooks/useWriteContract#parameters"},"parameters object"))))),(0,r.kt)("p",null,"To send the transaction, you can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," function returned by the hook (which we instance as ",(0,r.kt)("inlineCode",{parentName:"p"},"writeYourContractAsync"),"). Here's an example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<button\n  className="btn btn-primary"\n  onClick={async () => {\n    try {\n      await writeYourContractAsync({\n        functionName: "setGreeting",\n        args: ["The value to set"],\n        value: parseEther("0.1"),\n      });\n    } catch (e) {\n      console.error("Error setting greeting:", e);\n    }\n  }}\n>\n  Set Greeting\n</button>\n')),(0,r.kt)("p",null,"This example sends a transaction to the ",(0,r.kt)("inlineCode",{parentName:"p"},"YourContract")," smart contract to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"setGreeting")," function with the arguments passed in ",(0,r.kt)("inlineCode",{parentName:"p"},"args"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," function (",(0,r.kt)("inlineCode",{parentName:"p"},"writeYourContractAsync")," instance) sends the transaction to the smart contract."),(0,r.kt)("p",null,"Below is the configuration for ",(0,r.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," function:"),(0,r.kt)("h2",{id:"configuration-1"},"Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"functionName")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Name of the function to call.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"args")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Array of arguments to pass to the function (if accepts any). Types are inferred from contract's function parameters.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"value")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bigint")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Amount of ETH to send with the transaction (for payable functions only).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"onBlockConfirmation")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback function to execute when the transaction is confirmed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"blockConfirmations")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of block confirmations to wait for before considering transaction to be confirmed (default : 1).")))),(0,r.kt)("p",null,"You can also pass other arguments accepted by ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useWriteContract#mutate-async"},"writeContractAsync from wagmi"),"."),(0,r.kt)("h2",{id:"return-values"},"Return Values"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"writeContractAsync")," function sends the transaction to the smart contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isMining")," property indicates whether the transaction is currently being mined."),(0,r.kt)("li",{parentName:"ul"},"The extended object includes properties inherited from wagmi useWriteContract. You can check the ",(0,r.kt)("a",{parentName:"li",href:"https://wagmi.sh/react/api/hooks/useWriteContract#return-type"},"useWriteContract return values")," documentation to check the types.")))}m.isMDXComponent=!0}}]);