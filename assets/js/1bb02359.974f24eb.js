"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[923],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,y=c["".concat(i,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(y,l(l({ref:t},u),{},{components:n})):r.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:1},l="Deploy Your Stylus Smart Contracts",s={unversionedId:"deploying/deploy-smart-contracts",id:"deploying/deploy-smart-contracts",title:"Deploy Your Stylus Smart Contracts",description:"To deploy your Stylus smart contracts to Arbitrum networks, there are a few things you need to adjust.",source:"@site/docs/deploying/deploy-smart-contracts.mdx",sourceDirName:"deploying",slug:"/deploying/deploy-smart-contracts",permalink:"/scaffold-stylus-docs/deploying/deploy-smart-contracts",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/deploying/deploy-smart-contracts.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udef3 Shipping Your dApp",permalink:"/scaffold-stylus-docs/deploying"},next:{title:"Deploy Your NextJS App",permalink:"/scaffold-stylus-docs/deploying/deploy-nextjs-app"}},i={},p=[{value:"1. Configure your network",id:"1-configure-your-network",level:2},{value:"Local Network Setup",id:"local-network-setup",level:3},{value:"Available Networks",id:"available-networks",level:3},{value:"2. Deploy your Stylus smart contract(s)",id:"2-deploy-your-stylus-smart-contracts",level:2},{value:"Deploy to Local Network",id:"deploy-to-local-network",level:3},{value:"Create Your Own Contract",id:"create-your-own-contract",level:3},{value:"Step 1: Generate New Contract",id:"step-1-generate-new-contract",level:4},{value:"Step 2: Deploy Your Contract",id:"step-2-deploy-your-contract",level:4},{value:"Check Your Program",id:"check-your-program",level:3},{value:"3. Export ABI for your smart contract",id:"3-export-abi-for-your-smart-contract",level:2},{value:"4. Deploy to Other Networks",id:"4-deploy-to-other-networks",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Deploy to Other Network",id:"deploy-to-other-network",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deploy-your-stylus-smart-contracts"},"Deploy Your Stylus Smart Contracts"),(0,o.kt)("p",null,"To deploy your Stylus smart contracts to Arbitrum networks, there are a few things you need to adjust."),(0,o.kt)("h2",{id:"1-configure-your-network"},"1. Configure your network"),(0,o.kt)("p",null,"Scaffold-Stylus supports Arbitrum networks by default. You can configure your deployment network using environment variables."),(0,o.kt)("h3",{id:"local-network-setup"},"Local Network Setup"),(0,o.kt)("p",null,"For local development, you need to start a local Stylus-compatible network first:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn chain\n")),(0,o.kt)("p",null,"This command starts a local Stylus-compatible network using the Nitro dev node script (",(0,o.kt)("inlineCode",{parentName:"p"},"./nitro-devnode/run-dev-node.sh"),"). The network runs on your local machine and can be used for testing and development. You can customize the Nitro dev node configuration in the ",(0,o.kt)("inlineCode",{parentName:"p"},"nitro-devnode")," submodule."),(0,o.kt)("h3",{id:"available-networks"},"Available Networks"),(0,o.kt)("p",null,"This template supports Arbitrum and it's orbit networks only. You can test which networks are available and their RPC URLs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn info:networks\n")),(0,o.kt)("p",null,"This will show you all supported networks and their corresponding RPC endpoints."),(0,o.kt)("p",null,"For testnet information, including faucets and RPC endpoints, see the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.arbitrum.io/stylus/reference/testnet-information"},"Arbitrum Stylus testnet documentation"),"."),(0,o.kt)("h2",{id:"2-deploy-your-stylus-smart-contracts"},"2. Deploy your Stylus smart contract(s)"),(0,o.kt)("h3",{id:"deploy-to-local-network"},"Deploy to Local Network"),(0,o.kt)("p",null,"The simplest way to deploy your Stylus smart contract is using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy\n")),(0,o.kt)("p",null,"This command deploys a test smart contract to the local network. The contract is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/your-contract/src")," and can be modified to suit your needs. The ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn deploy")," command uses the deploy script located in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/scripts")," to deploy the contract to the network. You can also customize the deploy script."),(0,o.kt)("h3",{id:"create-your-own-contract"},"Create Your Own Contract"),(0,o.kt)("p",null,"Scaffold-Stylus enables you to create and deploy multiple contracts within a single project. Follow the steps below to create and deploy your own contracts."),(0,o.kt)("h4",{id:"step-1-generate-new-contract"},"Step 1: Generate New Contract"),(0,o.kt)("p",null,"Use the following command to create a new contract and customize it as needed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn new-module <contract-name>\n")),(0,o.kt)("p",null,"The generated contract will be located in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/<contract-name>"),"."),(0,o.kt)("h4",{id:"step-2-deploy-your-contract"},"Step 2: Deploy Your Contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy [...options]\n")),(0,o.kt)("p",null,"This command runs the ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy.ts")," script located in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/scripts"),". You can customize this script with your deployment logic."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Available Options:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--network <network>"),": Specify which network to deploy to"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--estimate-gas"),": Only perform gas estimation without deploying"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--max-fee=<maxFee>"),": Set maximum fee per gas in gwei")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," Deployment information is automatically saved in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/deployments")," by default."),(0,o.kt)("h3",{id:"check-your-program"},"Check Your Program"),(0,o.kt)("p",null,"Before deploying to live networks, you can check that your program compiles to valid WASM for Stylus and will succeed a deployment onchain without transacting:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo stylus check\n")),(0,o.kt)("p",null,"If successful, you should see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Finished release [optimized] target(s) in 1.88s\nReading WASM file at target/wasm32-unknown-unknown/release/your-program.wasm\nCompressed WASM size: 8.9 KB\nProgram succeeded Stylus onchain activation checks with Stylus version: 1\n")),(0,o.kt)("admonition",{title:"Note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can edit your deployment scripts in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/scripts/deploy.ts")," to customize the deployment process.")),(0,o.kt)("h2",{id:"3-export-abi-for-your-smart-contract"},"3. Export ABI for your smart contract"),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn deploy"),", the script will automatically export the ABI to ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/nextjs/contracts/deployedContracts.ts"),". You can manually export the ABI for your Stylus program by using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn export-abi\n")),(0,o.kt)("p",null,"This outputs a Solidity interface that represents your Rust program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * This file was automatically generated by Stylus and represents a Rust program.\n * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).\n */\n\n// SPDX-License-Identifier: MIT-OR-APACHE-2.0\npragma solidity ^0.8.23;\n\ninterface ICounter {\n    function number() external view returns (uint256);\n    function setNumber(uint256 new_number) external;\n    function increment() external;\n}\n")),(0,o.kt)("p",null,"Exporting ABIs uses a feature that is enabled by default in your ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[features]\nexport-abi = ["stylus-sdk/export-abi"]\n')),(0,o.kt)("h2",{id:"4-deploy-to-other-networks"},"4. Deploy to Other Networks"),(0,o.kt)("p",null,"To deploy your contracts to other networks (other than the default local Nitro dev node), you'll need to configure your RPC endpoint and wallet credentials."),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Set the RPC URL")),(0,o.kt)("p",{parentName:"li"},"Configure your target network's RPC endpoint using the proper ",(0,o.kt)("inlineCode",{parentName:"p"},"RPC_URL_<network>")," environment variable. You can set this in your shell or create a ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file (see ",(0,o.kt)("inlineCode",{parentName:"p"},".env.example")," for reference):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-env"},"RPC_URL_SEPOLIA=https://your-network-rpc-url\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Note:")," If RPC URL is not provided, the system will use the default public RPC URL from that network.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Set the Private Key")),(0,o.kt)("p",{parentName:"li"},"For real deployments, you must provide your own wallet's private key. Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"PRIVATE_KEY_<network>")," environment variable:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-env"},"PRIVATE_KEY_SEPOLIA=your_private_key_here\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Security Note:")," A development key is used by default when running the Nitro dev node locally, but for external deployments, you must provide your own private key.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Set the Account Address")),(0,o.kt)("p",{parentName:"li"},"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"ACCOUNT_ADDRESS_<network>")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-env"},"ACCOUNT_ADDRESS_SEPOLIA=your_account_address_here\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Update Frontend Configuration")),(0,o.kt)("p",{parentName:"li"},"Open ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/nextjs/scaffold.config.ts")," and update the ",(0,o.kt)("inlineCode",{parentName:"p"},"targetNetworks")," array to include your target chain. This ensures your frontend connects to the correct network and generates the proper ABI in ",(0,o.kt)("inlineCode",{parentName:"p"},"deployedContracts.ts"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as chains from "viem/chains";\n// ...\ntargetNetworks: [chains.arbitrumSepolia],\n')))),(0,o.kt)("h3",{id:"deploy-to-other-network"},"Deploy to Other Network"),(0,o.kt)("p",null,"Once configured, deploy to your target network:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy --network <network>\n")),(0,o.kt)("p",null,"You can also estimate gas costs before deploying:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy --network <network> --estimate-gas\n")),(0,o.kt)("admonition",{title:"Important Security Notes",type:"warning"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The values in ",(0,o.kt)("inlineCode",{parentName:"li"},".env.example")," provide a template for required environment variables"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Always keep your private key secure and never commit it to version control")),(0,o.kt)("li",{parentName:"ul"},"Consider using environment variable management tools for production deployments\n:::"))))}d.isMDXComponent=!0}}]);