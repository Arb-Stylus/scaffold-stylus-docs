"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[923],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,y=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(4137));const r={sidebar_position:1},l="Deploy Your Stylus Smart Contracts",i={unversionedId:"deploying/deploy-smart-contracts",id:"deploying/deploy-smart-contracts",title:"Deploy Your Stylus Smart Contracts",description:"To deploy your Stylus smart contracts to Arbitrum networks, there are a few things you need to adjust.",source:"@site/docs/deploying/deploy-smart-contracts.mdx",sourceDirName:"deploying",slug:"/deploying/deploy-smart-contracts",permalink:"/scaffold-stylus-docs/deploying/deploy-smart-contracts",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/deploying/deploy-smart-contracts.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udef3 Shipping Your dApp",permalink:"/scaffold-stylus-docs/deploying"},next:{title:"Deploy Your NextJS App",permalink:"/scaffold-stylus-docs/deploying/deploy-nextjs-app"}},s={},p=[{value:"1. Configure your network",id:"1-configure-your-network",level:2},{value:"Local Network Setup",id:"local-network-setup",level:3},{value:"Using Network Names",id:"using-network-names",level:3},{value:"Available Networks",id:"available-networks",level:3},{value:"Fallback Behavior",id:"fallback-behavior",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"2. Deploy your Stylus smart contract(s)",id:"2-deploy-your-stylus-smart-contracts",level:2},{value:"Deploy to Local Network",id:"deploy-to-local-network",level:3},{value:"Check Your Program",id:"check-your-program",level:3},{value:"Deploy to Live Networks",id:"deploy-to-live-networks",level:3},{value:"Estimate Gas Costs",id:"estimate-gas-costs",level:3},{value:"3. Export ABI for your smart contract",id:"3-export-abi-for-your-smart-contract",level:2},{value:"4. Deploy to Other Chains",id:"4-deploy-to-other-chains",level:2},{value:"1. Set the RPC URL",id:"1-set-the-rpc-url",level:3},{value:"2. Set the Private Key",id:"2-set-the-private-key",level:3},{value:"3. Update the Target Chain in the Frontend",id:"3-update-the-target-chain-in-the-frontend",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deploy-your-stylus-smart-contracts"},"Deploy Your Stylus Smart Contracts"),(0,o.kt)("p",null,"To deploy your Stylus smart contracts to Arbitrum networks, there are a few things you need to adjust."),(0,o.kt)("h2",{id:"1-configure-your-network"},"1. Configure your network"),(0,o.kt)("p",null,"Scaffold-Stylus supports Arbitrum networks by default. You can configure your deployment network using environment variables."),(0,o.kt)("h3",{id:"local-network-setup"},"Local Network Setup"),(0,o.kt)("p",null,"For local development, you need to start a local Stylus-compatible network first:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn chain\n")),(0,o.kt)("p",null,"This command starts a local Stylus-compatible network using the Nitro dev node script (",(0,o.kt)("inlineCode",{parentName:"p"},"./packages/stylus/nitro-devnode/run-dev-node.sh"),"). The network runs on your local machine and can be used for testing and development. You can customize the Nitro dev node configuration in the ",(0,o.kt)("inlineCode",{parentName:"p"},"nitro-devnode")," submodule."),(0,o.kt)("h3",{id:"using-network-names"},"Using Network Names"),(0,o.kt)("p",null,"Instead of setting ",(0,o.kt)("inlineCode",{parentName:"p"},"RPC_URL")," manually, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"NETWORK")," environment variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Deploy to Arbitrum One (mainnet)\nNETWORK=arbitrum yarn deploy\nNETWORK=mainnet yarn deploy  # alias for arbitrum\n\n# Deploy to Arbitrum Sepolia testnet\nNETWORK=arbitrumSepolia yarn deploy\nNETWORK=testnet yarn deploy  # alias for arbitrumSepolia\n")),(0,o.kt)("h3",{id:"available-networks"},"Available Networks"),(0,o.kt)("p",null,"This template supports Arbitrum networks only. You can test which networks are available and their RPC URLs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:networks\n")),(0,o.kt)("p",null,"This will show you all supported networks and their corresponding RPC endpoints."),(0,o.kt)("h3",{id:"fallback-behavior"},"Fallback Behavior"),(0,o.kt)("p",null,"If a network name is not supported (only ",(0,o.kt)("inlineCode",{parentName:"p"},"arbitrum"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"arbitrumSepolia"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mainnet"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"testnet")," are supported), the system will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Show a warning message indicating the network isn't supported"),(0,o.kt)("li",{parentName:"ol"},"Fall back to the ",(0,o.kt)("inlineCode",{parentName:"li"},"RPC_URL")," environment variable (or default to ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost:8547"),")"),(0,o.kt)("li",{parentName:"ol"},"Continue with deployment using the fallback endpoint")),(0,o.kt)("h3",{id:"environment-variables"},"Environment Variables"),(0,o.kt)("p",null,"You can still use the traditional approach with ",(0,o.kt)("inlineCode",{parentName:"p"},"RPC_URL"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"RPC_URL=https://your-custom-rpc.com yarn deploy\n")),(0,o.kt)("p",null,"Or combine both (network takes precedence):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK=mainnet RPC_URL=https://fallback-rpc.com yarn deploy\n")),(0,o.kt)("p",null,"For testnet information, including faucets and RPC endpoints, see the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.arbitrum.io/stylus/reference/testnet-information"},"Arbitrum Stylus testnet documentation"),"."),(0,o.kt)("h2",{id:"2-deploy-your-stylus-smart-contracts"},"2. Deploy your Stylus smart contract(s)"),(0,o.kt)("h3",{id:"deploy-to-local-network"},"Deploy to Local Network"),(0,o.kt)("p",null,"The simplest way to deploy your Stylus smart contract is using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy\n")),(0,o.kt)("p",null,"This command deploys a test smart contract to the local network. The contract is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/src")," and can be modified to suit your needs. The ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn deploy")," command uses the deploy script located in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/scripts")," to deploy the contract to the network. You can also customize the deploy script."),(0,o.kt)("h3",{id:"check-your-program"},"Check Your Program"),(0,o.kt)("p",null,"Before deploying to live networks, you can check that your program compiles to valid WASM for Stylus and will succeed a deployment onchain without transacting:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo stylus check\n")),(0,o.kt)("p",null,"If successful, you should see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Finished release [optimized] target(s) in 1.88s\nReading WASM file at target/wasm32-unknown-unknown/release/your-program.wasm\nCompressed WASM size: 8.9 KB\nProgram succeeded Stylus onchain activation checks with Stylus version: 1\n")),(0,o.kt)("h3",{id:"deploy-to-live-networks"},"Deploy to Live Networks"),(0,o.kt)("p",null,"To deploy your Stylus program to live networks, you'll need a private key file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo stylus deploy \\\n  --private-key-path=<PRIVKEY_FILE_PATH>\n")),(0,o.kt)("p",null,"The CLI will send 2 transactions to deploy and activate your program onchain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Compressed WASM size: 8.9 KB\nDeploying program to address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 1973450\nSubmitting tx...\nConfirmed tx 0x42db\u20267311, gas used 1973450\nActivating program at address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 14044638\nSubmitting tx...\nConfirmed tx 0x0bdb\u20263307, gas used 14044638\n")),(0,o.kt)("p",null,"Once both steps are successful, you can interact with your program as you would with any Ethereum smart contract."),(0,o.kt)("h3",{id:"estimate-gas-costs"},"Estimate Gas Costs"),(0,o.kt)("p",null,"You can estimate the gas costs to deploy and activate your program before sending the transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo stylus deploy \\\n  --private-key-path=<PRIVKEY_FILE_PATH> \\\n  --estimate-gas\n")),(0,o.kt)("p",null,"You will then see the estimated gas cost for deploying:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Deploying program to address e43a32b54e48c7ec0d3d9ed2d628783c23d65020\nEstimated gas for deployment: 1874876\n")),(0,o.kt)("admonition",{title:"Note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The above only estimates gas for the deployment tx by default. To estimate gas for activation, first deploy your program using ",(0,o.kt)("inlineCode",{parentName:"p"},"--mode=deploy-only"),", and then run ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo stylus deploy")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--estimate-gas")," flag, ",(0,o.kt)("inlineCode",{parentName:"p"},"--mode=activate-only"),", and specify ",(0,o.kt)("inlineCode",{parentName:"p"},"--activate-program-address"),".")),(0,o.kt)("admonition",{title:"Note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can edit your deployment scripts in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/stylus/scripts")," to customize the deployment process.")),(0,o.kt)("h2",{id:"3-export-abi-for-your-smart-contract"},"3. Export ABI for your smart contract"),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn deploy"),", the script will automatically export the ABI to ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/nextjs/contracts/deployedContracts.ts"),". You can manually export the ABI for your Stylus program by using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn export-abi\n")),(0,o.kt)("p",null,"This outputs a Solidity interface that represents your Rust program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * This file was automatically generated by Stylus and represents a Rust program.\n * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).\n */\n\n// SPDX-License-Identifier: MIT-OR-APACHE-2.0\npragma solidity ^0.8.23;\n\ninterface ICounter {\n    function number() external view returns (uint256);\n    function setNumber(uint256 new_number) external;\n    function increment() external;\n}\n")),(0,o.kt)("p",null,"Exporting ABIs uses a feature that is enabled by default in your ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[features]\nexport-abi = ["stylus-sdk/export-abi"]\n')),(0,o.kt)("h2",{id:"4-deploy-to-other-chains"},"4. Deploy to Other Chains"),(0,o.kt)("p",null,"To deploy your contracts to a different network (other than the default local Nitro dev node), you need to update a few configuration options:"),(0,o.kt)("h3",{id:"1-set-the-rpc-url"},"1. Set the RPC URL"),(0,o.kt)("p",null,"Specify the target network's RPC endpoint in the ",(0,o.kt)("inlineCode",{parentName:"p"},"RPC_URL")," environment variable. You can do this in your shell or by creating a ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file (see ",(0,o.kt)("inlineCode",{parentName:"p"},".env.example")," for reference)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env"},"RPC_URL=https://your-network-rpc-url\n")),(0,o.kt)("h3",{id:"2-set-the-private-key"},"2. Set the Private Key"),(0,o.kt)("p",null,"If you want to deploy using your own wallet, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"PRIVATE_KEY")," environment variable to your wallet's private key. By default, a development key is used when running the Nitro dev node locally, but for real deployments you must provide your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env"},"PRIVATE_KEY=your_private_key_here\n")),(0,o.kt)("h3",{id:"3-update-the-target-chain-in-the-frontend"},"3. Update the Target Chain in the Frontend"),(0,o.kt)("p",null,"Open ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/nextjs/scaffold.config.ts")," and change the ",(0,o.kt)("inlineCode",{parentName:"p"},"targetNetworks")," array to include the correct chain for your deployment. This ensures the frontend connects to the right network and that the ABI is generated correctly in ",(0,o.kt)("inlineCode",{parentName:"p"},"deployedContracts.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { mainnet } from "viem/chains";\n// ...\ntargetNetworks: [mainnet],\n')),(0,o.kt)("admonition",{title:"Important Notes",type:"warning"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The values in ",(0,o.kt)("inlineCode",{parentName:"li"},".env.example")," provide a template for the required environment variables."),(0,o.kt)("li",{parentName:"ul"},"The chain specified in ",(0,o.kt)("inlineCode",{parentName:"li"},"scaffold.config.ts")," is used to generate the ABI and populate ",(0,o.kt)("inlineCode",{parentName:"li"},"deployedContracts.ts")," for your frontend."),(0,o.kt)("li",{parentName:"ul"},"Always keep your private key secure and never commit it to version control.\n:::")),(0,o.kt)("h3",{parentName:"admonition",id:"4-deploy-to-the-target-network"},"4. Deploy to the Target Network"),(0,o.kt)("p",{parentName:"admonition"},"Once you've configured the network settings, you can deploy using:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy\n")),(0,o.kt)("p",{parentName:"admonition"},"Or for more control over the deployment process:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo stylus deploy --private-key-path=<PRIVKEY_FILE_PATH>\n"))))}c.isMDXComponent=!0}}]);