"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[536],{4137:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=o.createContext({}),d=function(t){var e=o.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},l=function(t){var e=d(t.components);return o.createElement(c.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},g=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,c=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),u=d(n),g=a,m=u["".concat(c,".").concat(g)]||u[g]||p[g]||r;return n?o.createElement(m,s(s({ref:e},l),{},{components:n})):o.createElement(m,s({ref:e},l))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,s=new Array(r);s[0]=g;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[u]="string"==typeof t?t:a,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3134:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=n(7462),a=(n(7294),n(4137));const r={sidebar_position:3,title:"Read a uint from a contract",description:"Learn how to read from contract functions which accepts arguments / no arguments and display them on UI."},s="Read a uint from a contract",i={unversionedId:"recipes/ReadUintFromContract",id:"recipes/ReadUintFromContract",title:"Read a uint from a contract",description:"Learn how to read from contract functions which accepts arguments / no arguments and display them on UI.",source:"@site/docs/recipes/ReadUintFromContract.md",sourceDirName:"recipes",slug:"/recipes/ReadUintFromContract",permalink:"/scaffold-stylus-docs/recipes/ReadUintFromContract",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/recipes/ReadUintFromContract.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Read a uint from a contract",description:"Learn how to read from contract functions which accepts arguments / no arguments and display them on UI."},sidebar:"tutorialSidebar",previous:{title:"Write to contract with writeContractAsync button",permalink:"/scaffold-stylus-docs/recipes/WriteToContractWriteAsyncButton"},next:{title:"Wagmi useWriteContract with transaction status",permalink:"/scaffold-stylus-docs/recipes/WagmiContractWriteWithFeedback"}},c={},d=[{value:"Implementation guide",id:"implementation-guide",level:2},{value:"Step 1: Create a new Component",id:"step-1-create-a-new-component",level:3},{value:"Step 2: Retrieve total greetings count",id:"step-2-retrieve-total-greetings-count",level:3},{value:"Step 3: Retrieve connected address greetings count",id:"step-3-retrieve-connected-address-greetings-count",level:3},{value:"Step 4: Bonus adding loading state",id:"step-4-bonus-adding-loading-state",level:3}],l={toc:d},u="wrapper";function p(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,o.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"read-a-uint-from-a-contract"},"Read a ",(0,a.kt)("inlineCode",{parentName:"h1"},"uint")," from a contract"),(0,a.kt)("p",null,"This recipe demonstrates how to read data from contract functions and display it on the UI. We'll showcase an example that accepts some arguments (parameters), and another with no arguments at all."),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,"Here is the full code, which we will be implementing in the guide below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/GreetingsCount.tsx"',title:'"components/GreetingsCount.tsx"'},'import { useAccount } from "wagmi";\nimport { useScaffoldReadContract } from "~~/hooks/scaffold-eth";\n\nexport const GreetingsCount = () => {\n  const { address: connectedAddress } = useAccount();\n\n  const { data: totalCounter, isLoading: isTotalCounterLoading } = useScaffoldReadContract({\n    contractName: "YourContract",\n    functionName: "totalCounter",\n  });\n\n  const { data: connectedAddressCounter, isLoading: isConnectedAddressCounterLoading } = useScaffoldReadContract({\n    contractName: "YourContract",\n    functionName: "userGreetingCounter",\n    args: [connectedAddress], // passing args to function\n  });\n\n  return (\n    <div className="card card-compact w-64 bg-secondary text-primary-content shadow-xl m-4">\n      <div className="card-body items-center text-center">\n        <h2 className="card-title">Greetings Count</h2>\n        <div className="card-actions items-center flex-col gap-1 text-lg">\n          <h2 className="font-bold m-0">Total Greetings count:</h2>\n          {isTotalCounterLoading ? (\n            <span className="loading loading-spinner"></span>\n          ) : (\n            <p className="m-0">{totalCounter ? totalCounter.toString() : 0}</p>\n          )}\n          <h2 className="font-bold m-0">Your Greetings count:</h2>\n          {isConnectedAddressCounterLoading ? (\n            <span className="loading loading-spinner"></span>\n          ) : (\n            <p className="m-0">{connectedAddressCounter ? connectedAddressCounter.toString() : 0}</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n'))),(0,a.kt)("h2",{id:"implementation-guide"},"Implementation guide"),(0,a.kt)("h3",{id:"step-1-create-a-new-component"},"Step 1: Create a new Component"),(0,a.kt)("p",null,'Begin by creating a new component in the "components" folder of your application.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/GreetingsCount.tsx"',title:'"components/GreetingsCount.tsx"'},'export const GreetingsCount = () => {\n  return (\n    <div>\n      <h2 className="font-bold m-0">Total Greetings count:</h2>\n      <h2 className="font-bold m-0">Your Greetings count:</h2>\n    </div>\n  );\n};\n')),(0,a.kt)("h3",{id:"step-2-retrieve-total-greetings-count"},"Step 2: Retrieve total greetings count"),(0,a.kt)("p",null,"Initialize the ",(0,a.kt)("a",{parentName:"p",href:"/hooks/useScaffoldReadContract"},"useScaffoldReadContract")," hook to read from the contract. This hook provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," which contains the return value of the function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/GreetingsCount.tsx"',title:'"components/GreetingsCount.tsx"'},'//highlight-start\nimport { useScaffoldReadContract } from "~~/hooks/scaffold-eth";\n// highlight-end\n\nexport const GreetingsCount = () => {\n  // highlight-start\n  const { data: totalCounter } = useScaffoldReadContract({\n    contractName: "YourContract",\n    functionName: "totalCounter",\n  });\n  // highlight-end\n\n  return (\n    <div>\n      <h2 className="font-bold m-0">Total Greetings count:</h2>\n      //highlight-start\n      <p>{totalCounter ? totalCounter.toString() : 0}</p>\n      //highlight-end\n      <h2 className="font-bold m-0">Your Greetings count:</h2>\n    </div>\n  );\n};\n')),(0,a.kt)("p",null,"In the line ",(0,a.kt)("inlineCode",{parentName:"p"},"const {data: totalCounter} = useScaffoldReadContract({...})")," we are using ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring assignment")," to assign ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," to a new name ",(0,a.kt)("inlineCode",{parentName:"p"},"totalCounter"),"."),(0,a.kt)("p",null,"In the contract, ",(0,a.kt)("inlineCode",{parentName:"p"},"totalCounter")," returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"uint")," value, which is represented as a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"},(0,a.kt)("inlineCode",{parentName:"a"},"BigInt"))," in javascript and can be converted to a readable string using ",(0,a.kt)("inlineCode",{parentName:"p"},".toString()"),"."),(0,a.kt)("h3",{id:"step-3-retrieve-connected-address-greetings-count"},"Step 3: Retrieve connected address greetings count"),(0,a.kt)("p",null,"We can get the connected address using the ",(0,a.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useAccount"},"useAccount")," hook and pass it to ",(0,a.kt)("inlineCode",{parentName:"p"},"args")," key in the ",(0,a.kt)("inlineCode",{parentName:"p"},"useScaffoldReadContract")," hook configuration. This will be used as an argument to read the contract function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/GreetingsCount.tsx"',title:'"components/GreetingsCount.tsx"'},'import { useScaffoldReadContract } from "~~/hooks/scaffold-eth";\n//highlight-start\nimport { useAccount } from "wagmi";\n//highlight-end\n\nexport const GreetingsCount = () => {\n  //highlight-start\n  const { address: connectedAddress } = useAccount();\n  //highlight-end\n\n  const { data: totalCounter } = useScaffoldReadContract({\n    contractName: "YourContract",\n    functionName: "totalCounter",\n  });\n\n  //highlight-start\n  const { data: connectedAddressCounter } = useScaffoldReadContract({\n    contractName: "YourContract",\n    functionName: "userGreetingCounter",\n    args: [connectedAddress], // passing args to function\n  });\n  //highlight-end\n\n  return (\n    <div>\n      <h2>Total Greetings count:</h2>\n      <p>{totalCounter ? totalCounter.toString() : 0}</p>\n      <h2>Your Greetings count:</h2>\n      //highlight-start\n      <p>{connectedAddressCounter ? connectedAddressCounter.toString() : 0}</p>\n      //highlight-end\n    </div>\n  );\n};\n')),(0,a.kt)("h3",{id:"step-4-bonus-adding-loading-state"},"Step 4: Bonus adding loading state"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoading")," returned from the ",(0,a.kt)("a",{parentName:"p",href:"/hooks/usescaffoldreadcontract"},(0,a.kt)("inlineCode",{parentName:"a"},"useScaffoldReadContract"))," hook. This variable is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," while fetching data from the contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/GreetingsCount.tsx"',title:'"components/GreetingsCount.tsx"'},'import { useScaffoldReadContract } from "~~/hooks/scaffold-eth";\nimport { useAccount } from "wagmi";\n\nexport const GreetingsCount = () => {\n  const { address: connectedAddress } = useAccount();\n\n  // highlight-start\n  const { data: totalCounter, isLoading: isTotalCounterLoading } = useScaffoldReadContract({\n    // highlight-end\n    contractName: "YourContract",\n    functionName: "totalCounter",\n  });\n\n  // highlight-start\n  const { data: connectedAddressCounter, isLoading: isConnectedAddressCounterLoading } = useScaffoldReadContract({\n    // highlight-end\n    contractName: "YourContract",\n    functionName: "userGreetingCounter",\n    args: [connectedAddress], // passing args to function\n  });\n\n  return (\n    <div>\n      <h2>Total Greetings count:</h2>\n      // highlight-start\n      {isTotalCounterLoading ? (\n        <span className="loading loading-spinner"></span>\n      ) : (\n        <p className="m-0">{totalCounter ? totalCounter.toString() : 0}</p>\n      )}\n      // highlight-end\n      <h2>Your Greetings count:</h2>\n      // highlight-start\n      {isConnectedAddressCounterLoading ? (\n        <span className="loading loading-spinner"></span>\n      ) : (\n        <p className="m-0">{connectedAddressCounter ? connectedAddressCounter.toString() : 0}</p>\n      )}\n      // highlight-end\n    </div>\n  );\n};\n')))}p.isMDXComponent=!0}}]);