"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[382],{4137:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),u=l(n),h=o,g=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(g,i(i({ref:e},p),{},{components:n})):r.createElement(g,i({ref:e},p))}));function g(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=h;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c[u]="string"==typeof t?t:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},596:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:2,title:"Write to contract with writeContractAsync button",description:"Learn how to create a button that executes the writeContractAsync function to interact with a smart contract."},i="Write to a Contract with writeContractAsync button",c={unversionedId:"recipes/WriteToContractWriteAsyncButton",id:"recipes/WriteToContractWriteAsyncButton",title:"Write to contract with writeContractAsync button",description:"Learn how to create a button that executes the writeContractAsync function to interact with a smart contract.",source:"@site/docs/recipes/WriteToContractWriteAsyncButton.md",sourceDirName:"recipes",slug:"/recipes/WriteToContractWriteAsyncButton",permalink:"/scaffold-stylus-docs/recipes/WriteToContractWriteAsyncButton",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/recipes/WriteToContractWriteAsyncButton.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Write to contract with writeContractAsync button",description:"Learn how to create a button that executes the writeContractAsync function to interact with a smart contract."},sidebar:"tutorialSidebar",previous:{title:"Get balance of the connected account",permalink:"/scaffold-stylus-docs/recipes/GetCurrentBalanceFromAccount"},next:{title:"Read a uint from a contract",permalink:"/scaffold-stylus-docs/recipes/ReadUintFromContract"}},s={},l=[{value:"Implementation",id:"implementation",level:2},{value:"Step 1: Set Up Your Component",id:"step-1-set-up-your-component",level:3},{value:"Step 2: Initialize <code>useScaffoldWriteContract</code> hook",id:"step-2-initialize-usescaffoldwritecontract-hook",level:3},{value:"Step 3: Add input change logic and send transaction when users click the button",id:"step-3-add-input-change-logic-and-send-transaction-when-users-click-the-button",level:3},{value:"Step 4: Bonus adding loading state",id:"step-4-bonus-adding-loading-state",level:3}],p={toc:l},u="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"write-to-a-contract-with-writecontractasync-button"},"Write to a Contract with ",(0,o.kt)("inlineCode",{parentName:"h1"},"writeContractAsync")," button"),(0,o.kt)("p",null,"This recipe shows how to implement a button that allows users to interact with a smart contract by executing the ",(0,o.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," function returned by ",(0,o.kt)("a",{parentName:"p",href:"/hooks/useScaffoldWriteContract"},"useScaffoldWriteContract"),". By following this guide, you can create a user interface for writing data to a contract."),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,"Here is the full code, which we will be implementing in the guide below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Greetings.tsx"',title:'"components/Greetings.tsx"'},'import { useState } from "react";\nimport { parseEther } from "viem";\nimport { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState("");\n\n  const { writeContractAsync, isPending } = useScaffoldWriteContract("YourContract");\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: "setGreeting",\n          args: [newGreeting],\n          value: parseEther("0.01"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log("\ud83d\udce6 Transaction blockHash", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error("Error setting greeting", e);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type="text"\n        placeholder="Write your greeting"\n        className="input border border-primary"\n        onChange={e => setNewGreeting(e.target.value)}\n      />\n      <button className="btn btn-primary" onClick={handleSetGreeting} disabled={isPending}>\n        {isPending ? <span className="loading loading-spinner loading-sm"></span> : "Send"}\n      </button>\n    </>\n  );\n};\n'))),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("h3",{id:"step-1-set-up-your-component"},"Step 1: Set Up Your Component"),(0,o.kt)("p",null,'Create a new component in the "components" folder. This component will enable users to write data to a smart contract.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Greetings.tsx"',title:'"components/Greetings.tsx"'},'export const Greetings = () => {\n  return (\n    <>\n      <input type="text" placeholder="Write your greeting" className="input border border-primary" />\n      <button>Send</button>\n    </>\n  );\n};\n')),(0,o.kt)("h3",{id:"step-2-initialize-usescaffoldwritecontract-hook"},"Step 2: Initialize ",(0,o.kt)("inlineCode",{parentName:"h3"},"useScaffoldWriteContract")," hook"),(0,o.kt)("p",null,"Initialize the ",(0,o.kt)("inlineCode",{parentName:"p"},"useScaffoldWriteContract")," hook. This hook provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," function for sending transactions, we'll create ",(0,o.kt)("inlineCode",{parentName:"p"},"handleSetGreeting")," function in which we'll call and pass parameters to ",(0,o.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," required to perform contract interaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// highlight-start\nimport { useState } from "react";\nimport { parseEther } from "viem";\nimport { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";\n// highlight-end\n\nexport const Greetings = () => {\n  // highlight-start\n  const [newGreeting, setNewGreeting] = useState("");\n  // highlight-end\n\n  // highlight-start\n  const { writeContractAsync } = useScaffoldWriteContract("YourContract");\n  // highlight-end\n\n  // highlight-start\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: "setGreeting",\n          args: [newGreeting],\n          value: parseEther("0.01"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log("\ud83d\udce6 Transaction blockHash", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error("Error setting greeting", e);\n    }\n  };\n  // highlight-end\n\n  return (\n    <>\n      <input type="text" placeholder="Write your greeting" className="input border border-primary" />\n      <button>Send</button>\n    </>\n  );\n};\n')),(0,o.kt)("h3",{id:"step-3-add-input-change-logic-and-send-transaction-when-users-click-the-button"},"Step 3: Add input change logic and send transaction when users click the button"),(0,o.kt)("p",null,"Wire up the input field to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"newGreeting")," state when the user types in a new greeting and call ",(0,o.kt)("inlineCode",{parentName:"p"},"handleSetGreeting")," function when user click on the button."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { parseEther } from "viem";\nimport { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState("");\n\n  const { writeContractAsync } = useScaffoldWriteContract("YourContract");\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: "setGreeting",\n          args: [newGreeting],\n          value: parseEther("0.01"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log("\ud83d\udce6 Transaction blockHash", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error("Error setting greeting", e);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type="text"\n        placeholder="Write your greeting"\n        className="input border border-primary"\n        // highlight-start\n        onChange={e => setNewGreeting(e.target.value)}\n        // highlight-end\n      />\n      <button\n        className="btn btn-primary"\n        // highlight-start\n        onClick={handleSetGreeting}\n        // highlight-end\n      >\n        Send\n      </button>\n    </>\n  );\n};\n')),(0,o.kt)("h3",{id:"step-4-bonus-adding-loading-state"},"Step 4: Bonus adding loading state"),(0,o.kt)("p",null,"We can use ",(0,o.kt)("inlineCode",{parentName:"p"},"isPending")," returned from ",(0,o.kt)("inlineCode",{parentName:"p"},"useScaffoldWriteContract")," while the transaction is being mined and also disable the button."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\nimport { parseEther } from "viem";\nimport { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState("");\n  // highlight-start\n  const { writeContractAsync, isPending } = useScaffoldWriteContract("YourContract");\n  // highlight-end\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: "setGreeting",\n          args: [newGreeting],\n          value: parseEther("0.01"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log("\ud83d\udce6 Transaction blockHash", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error("Error setting greeting", e);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type="text"\n        placeholder="Write your greeting"\n        className="input border border-primary"\n        onChange={e => setNewGreeting(e.target.value)}\n      />\n\n      <button\n        className="btn btn-primary"\n        onClick={handleSetGreeting}\n        // highlight-start\n        disabled={isPending}\n      >\n        {isPending ? <span className="loading loading-spinner loading-sm"></span> : "Send"}\n      </button>\n    </>\n    // highlight-end\n  );\n};\n')))}d.isMDXComponent=!0}}]);