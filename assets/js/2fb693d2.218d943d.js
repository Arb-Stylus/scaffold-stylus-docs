"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[773],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||i;return n?a.createElement(m,r(r({ref:t},l),{},{components:n})):a.createElement(m,r({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},425:(e,t,n)=>{n(7294)},4259:(e,t,n)=>{n(7294),n(1048)},9429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7462),o=(n(7294),n(4137));n(4259),n(425);const i={sidebar_position:5,title:"Add a custom chain",description:"Learn how to add custom chains to your project."},r="Add a custom chain",s={unversionedId:"recipes/add-custom-chain",id:"recipes/add-custom-chain",title:"Add a custom chain",description:"Learn how to add custom chains to your project.",source:"@site/docs/recipes/add-custom-chain.mdx",sourceDirName:"recipes",slug:"/recipes/add-custom-chain",permalink:"/scaffold-stylus-docs/recipes/add-custom-chain",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/recipes/add-custom-chain.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Add a custom chain",description:"Learn how to add custom chains to your project."},sidebar:"tutorialSidebar",previous:{title:"Wagmi useWriteContract with transaction status",permalink:"/scaffold-stylus-docs/recipes/WagmiContractWriteWithFeedback"},next:{title:"\ud83d\udef3 Shipping Your dApp",permalink:"/scaffold-stylus-docs/deploying"}},c={},d=[{value:"Step 1: Define the chain",id:"step-1-define-the-chain",level:3},{value:"Step 2: Update <code>scaffold.config.ts</code>",id:"step-2-update-scaffoldconfigts",level:3}],l={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-a-custom-chain"},"Add a custom chain"),(0,o.kt)("p",null,"This recipe demonstrates how to add a custom chain to your project. We'll use Base as an example, but you can apply this process to any other chain you want to add.\nScaffold-Stylus uses ",(0,o.kt)("a",{parentName:"p",href:"https://viem.sh/docs/chains/introduction"},"viem/chains")," as a list of chains.\nNormally, Base already exists in viem/chains and ",(0,o.kt)("a",{parentName:"p",href:"/deploying/deploy-nextjs-app#--targetnetworks"},"you can import it and use it"),", but we're going to add it manually to show you how to do it."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Scaffold-Stylus consists of two parts:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"packages/nextjs"),": nextjs frontend"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"packages/hardhat")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"packages/foundry"),": hardhat or foundry to deploy smart contracts")),(0,o.kt)("p",{parentName:"admonition"},"The frontend and the hardhat/foundry project use a different set of chains.\nYou should add the chain to both the frontend and your hardhat/foundry config. Checkout ",(0,o.kt)("a",{parentName:"p",href:"/deploying/deploy-smart-contracts"},"deploying your smart contract")," section on how to deploy different chains."),(0,o.kt)("p",{parentName:"admonition"},"By doing this, you will be able to deploy the contracts to the chain you added and interact with them from the frontend.")),(0,o.kt)("h3",{id:"step-1-define-the-chain"},"Step 1: Define the chain"),(0,o.kt)("p",null,"First, create a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"customChains.ts")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/nextjs/utils/")," directory."),(0,o.kt)("p",null,"Open the file with your favorite editor and add the following code to define the chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="packages/nextjs/utils/customChains.ts"',title:'"packages/nextjs/utils/customChains.ts"'},'import { defineChain } from "viem";\n\n// Base chain\nexport const base = defineChain({\n  id: 8453,\n  name: "Base",\n  nativeCurrency: { name: "Base", symbol: "ETH", decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ["https://mainnet.base.org"],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: "Basescan",\n      url: "https://basescan.org",\n    },\n  },\n});\n')),(0,o.kt)("p",null,"In this file, we're defining the Base chain. We're using the ",(0,o.kt)("inlineCode",{parentName:"p"},"defineChain")," function from viem to define the chain. You can add as many chains as you want to the ",(0,o.kt)("inlineCode",{parentName:"p"},"customChains.ts")," file."),(0,o.kt)("h3",{id:"step-2-update-scaffoldconfigts"},"Step 2: Update ",(0,o.kt)("inlineCode",{parentName:"h3"},"scaffold.config.ts")),(0,o.kt)("p",null,"Next, update your ",(0,o.kt)("inlineCode",{parentName:"p"},"scaffold.config.ts")," file to include the new chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="packages/nextjs/scaffold.config.ts"',title:'"packages/nextjs/scaffold.config.ts"'},'import { base } from "./utils/customChains";\n// ... other imports and type definitions\n\nconst scaffoldConfig = {\n  targetNetworks: [base],\n  // ... other configuration options\n} as const satisfies ScaffoldConfig;\n\nexport default scaffoldConfig;\n')),(0,o.kt)("p",null,"If you'd like to add multiple chains, you can do so by adding them to the ",(0,o.kt)("inlineCode",{parentName:"p"},"targetNetworks")," array. Below is a simple example of how to add multiple chains."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="packages/nextjs/scaffold.config.ts"',title:'"packages/nextjs/scaffold.config.ts"'},'import { base, baseSepolia } from "./utils/customChains";\n\nconst scaffoldConfig = {\n  targetNetworks: [base, baseSepolia],\n  // ... other configuration options\n} as const satisfies ScaffoldConfig;\n')))}u.isMDXComponent=!0}}]);