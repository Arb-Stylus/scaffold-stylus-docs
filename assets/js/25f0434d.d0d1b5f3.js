"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[381],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6253:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(4137));const o={sidebar_position:3},i="useScaffoldWatchContractEvent",s={unversionedId:"hooks/useScaffoldWatchContractEvent",id:"hooks/useScaffoldWatchContractEvent",title:"useScaffoldWatchContractEvent",description:"Use this hook to subscribe to events emitted by your smart contract, and receive real-time updates when these events are emitted.",source:"@site/docs/hooks/useScaffoldWatchContractEvent.md",sourceDirName:"hooks",slug:"/hooks/useScaffoldWatchContractEvent",permalink:"/scaffold-stylus-docs/hooks/useScaffoldWatchContractEvent",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/hooks/useScaffoldWatchContractEvent.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"useScaffoldWriteContract",permalink:"/scaffold-stylus-docs/hooks/useScaffoldWriteContract"},next:{title:"useScaffoldEventHistory",permalink:"/scaffold-stylus-docs/hooks/useScaffoldEventHistory"}},c={},l=[{value:"Configuration",id:"configuration",level:2}],p={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usescaffoldwatchcontractevent"},"useScaffoldWatchContractEvent"),(0,r.kt)("p",null,"Use this hook to subscribe to events emitted by your smart contract, and receive real-time updates when these events are emitted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'useScaffoldWatchContractEvent({\n  contractName: "YourContract",\n  eventName: "GreetingChange",\n  // The onLogs function is called whenever a GreetingChange event is emitted by the contract.\n  // Parameters emitted by the event can be destructed using the below example\n  // for this example: event GreetingChange(address greetingSetter, string newGreeting, bool premium, uint256 value);\n  onLogs: logs => {\n    logs.map(log => {\n      const { greetingSetter, value, premium, newGreeting } = log.args;\n      console.log("\ud83d\udce1 GreetingChange event", greetingSetter, value, premium, newGreeting);\n    });\n  },\n});\n')),(0,r.kt)("p",null,"This example subscribes to the ",(0,r.kt)("inlineCode",{parentName:"p"},"GreetingChange")," event emitted by the ",(0,r.kt)("inlineCode",{parentName:"p"},"YourContract")," smart contract and logs the parameters from the event to the console when it's emitted."),(0,r.kt)("p",null,"This hook is a wrapper around wagmi's ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useWatchContractEvent"},"useWatchContractEvent"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Due to shortcomings of some RPC providers, this hook may or may not fire events always ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/wevm/wagmi/issues/3883"},"checkout this discussion")," for more details. To update the RPC link checkout ",(0,r.kt)("a",{parentName:"p",href:"/deploying/deploy-nextjs-app#--alchemyapikey"},"this section"))),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"contractName")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Name of the contract to read from.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"eventName")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Name of the event to read.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"onLogs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback function to execute when the event is emitted. Accepts an array of ",(0,r.kt)("inlineCode",{parentName:"td"},"logs")," that occurred during the ",(0,r.kt)("a",{parentName:"td",href:"/deploying/deploy-nextjs-app#--pollinginterval"},(0,r.kt)("inlineCode",{parentName:"a"},"pollingInterval"))," set at ",(0,r.kt)("inlineCode",{parentName:"td"},"scaffold.config.ts"),". Each array item contains an ",(0,r.kt)("inlineCode",{parentName:"td"},"args")," property, which can be destructured to get the parameters emitted by the event. This function can customized according to your needs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"chainId")," (optional)"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Id of the chain the contract lives on. Defaults to ",(0,r.kt)("a",{parentName:"td",href:"/deploying/deploy-nextjs-app#--targetnetworks"},(0,r.kt)("inlineCode",{parentName:"a"},"targetNetworks[0].id")))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"It is recommended to ",(0,r.kt)("inlineCode",{parentName:"p"},"setState")," using ",(0,r.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state"},"updater function")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"onLogs")," function to avoid problems due to caching.")))}m.isMDXComponent=!0}}]);