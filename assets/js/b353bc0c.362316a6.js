"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[366],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=c,h=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function h(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:c,a[1]=s;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(7462),c=(n(7294),n(4137));const o={sidebar_position:1,title:"Get balance of the connected account",description:"Learn how to retrieve and display the ETH balance of the connected account in your dApp."},a="Get the Current Balance of the Connected Account",s={unversionedId:"recipes/GetCurrentBalanceFromAccount",id:"recipes/GetCurrentBalanceFromAccount",title:"Get balance of the connected account",description:"Learn how to retrieve and display the ETH balance of the connected account in your dApp.",source:"@site/docs/recipes/GetCurrentBalanceFromAccount.md",sourceDirName:"recipes",slug:"/recipes/GetCurrentBalanceFromAccount",permalink:"/scaffold-stylus-docs/recipes/GetCurrentBalanceFromAccount",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/recipes/GetCurrentBalanceFromAccount.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Get balance of the connected account",description:"Learn how to retrieve and display the ETH balance of the connected account in your dApp."},sidebar:"tutorialSidebar",previous:{title:"\ud83e\uddea Recipes",permalink:"/scaffold-stylus-docs/recipes"},next:{title:"Write to contract with writeContractAsync button",permalink:"/scaffold-stylus-docs/recipes/WriteToContractWriteAsyncButton"}},i={},d=[{value:"Implementation guide",id:"implementation-guide",level:2},{value:"Step 1: Create a new Component",id:"step-1-create-a-new-component",level:3},{value:"Step 2: Retrieve the Connected Account",id:"step-2-retrieve-the-connected-account",level:3}],l={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,c.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"get-the-current-balance-of-the-connected-account"},"Get the Current Balance of the Connected Account"),(0,c.kt)("p",null,"This recipe shows how to fetch and display the ETH balance of the currently connected account."),(0,c.kt)("details",{open:!0},(0,c.kt)("summary",null,"Here is the full code, which we will be implementing in the guide below:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/ConnectedAddressBalance.tsx"',title:'"components/ConnectedAddressBalance.tsx"'},'import { useAccount } from "wagmi";\nimport { Address, Balance } from "~~/components/scaffold-eth";\n\nexport const ConnectedAddressBalance = () => {\n  const { address: connectedAddress } = useAccount();\n\n  return (\n    <div className="bg-base-300 p-6 rounded-lg max-w-md mx-auto mt-6">\n      <h2 className="text-lg font-bold mb-2">Your Ethereum Balance</h2>\n\n      <div className="text-sm font-semibold mb-2">\n        Address: <Address address={connectedAddress} />\n      </div>\n\n      <div className="text-sm font-semibold">\n        Balance: <Balance address={connectedAddress} />\n      </div>\n    </div>\n  );\n};\n'))),(0,c.kt)("h2",{id:"implementation-guide"},"Implementation guide"),(0,c.kt)("h3",{id:"step-1-create-a-new-component"},"Step 1: Create a new Component"),(0,c.kt)("p",null,'Begin by creating a new component in the "components" folder of your application.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/ConnectedAddressBalance.tsx"',title:'"components/ConnectedAddressBalance.tsx"'},"export const ConnectedAddressBalance = () => {\n  return (\n    <div>\n      <h2>Your Ethereum Balance</h2>\n    </div>\n  );\n};\n")),(0,c.kt)("h3",{id:"step-2-retrieve-the-connected-account"},"Step 2: Retrieve the Connected Account"),(0,c.kt)("p",null,"Fetch the Ethereum address of the currently connected account using the ",(0,c.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useAccount"},"useAccount wagmi hook")," and easily display them using Scaffold Stylus ",(0,c.kt)("a",{parentName:"p",href:"/components/Address"},"Address")," and ",(0,c.kt)("a",{parentName:"p",href:"/components/Balance"},"Balance")," components."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/ConnectedAddressBalance.tsx"',title:'"components/ConnectedAddressBalance.tsx"'},'// highlight-start\nimport { useAccount } from "wagmi";\nimport { Address, Balance } from "~~/components/scaffold-eth";\n// highlight-end\n\nexport const ConnectedAddressBalance = () => {\n  // highlight-start\n  const { address: connectedAddress } = useAccount();\n  // highlight-end\n\n  return (\n    <div>\n      <h2>Your Arbitrum Balance</h2>\n      {/* highlight-start */}\n      Address: <Address address={connectedAddress} />\n      Balance: <Balance address={connectedAddress} />\n      {/* highlight-end */}\n    </div>\n  );\n};\n')))}u.isMDXComponent=!0}}]);