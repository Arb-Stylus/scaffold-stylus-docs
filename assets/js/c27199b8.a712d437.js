"use strict";(self.webpackChunkse_2=self.webpackChunkse_2||[]).push([[678],{4137:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},d="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:e},p),{},{components:n})):r.createElement(h,i({ref:e},p))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[d]="string"==typeof t?t:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},415:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(4137));const o={sidebar_position:4,title:"Wagmi useWriteContract with transaction status",description:"Show feedback on transaction status to user by `useWriteContract` along with `useTransactor`"},i="Wagmi useWriteContract with transaction status",s={unversionedId:"recipes/WagmiContractWriteWithFeedback",id:"recipes/WagmiContractWriteWithFeedback",title:"Wagmi useWriteContract with transaction status",description:"Show feedback on transaction status to user by `useWriteContract` along with `useTransactor`",source:"@site/docs/recipes/WagmiContractWriteWithFeedback.md",sourceDirName:"recipes",slug:"/recipes/WagmiContractWriteWithFeedback",permalink:"/recipes/WagmiContractWriteWithFeedback",draft:!1,editUrl:"https://github.com/Arb-Stylus/scaffold-stylus-docs/edit/main/docs/recipes/WagmiContractWriteWithFeedback.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Wagmi useWriteContract with transaction status",description:"Show feedback on transaction status to user by `useWriteContract` along with `useTransactor`"},sidebar:"tutorialSidebar",previous:{title:"Read a uint from a contract",permalink:"/recipes/ReadUintFromContract"},next:{title:"Add a custom chain",permalink:"/recipes/add-custom-chain"}},c={},l=[{value:"Implementation",id:"implementation",level:2},{value:"Step 1: Set Up Your Component",id:"step-1-set-up-your-component",level:3},{value:"Step 2: Configure wagmi&#39;s <code>useWriteContract</code> hook",id:"step-2-configure-wagmis-usewritecontract-hook",level:3},{value:"Step 3: Initialize <code>useTransactor</code> hook and send transaction",id:"step-3-initialize-usetransactor-hook-and-send-transaction",level:3},{value:"Step 4: Wrap <code>useTransactor</code> in a handler async function",id:"step-4-wrap-usetransactor-in-a-handler-async-function",level:3},{value:"Step 5: Bonus adding loading state",id:"step-5-bonus-adding-loading-state",level:3}],p={toc:l},d="wrapper";function u(t){let{components:e,...n}=t;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wagmi-usewritecontract-with-transaction-status"},"Wagmi ",(0,a.kt)("inlineCode",{parentName:"h1"},"useWriteContract")," with transaction status"),(0,a.kt)("p",null,'This recipe demonstrates how to create a button for contract interaction using the "useTransactor" and "useWriteContract" hooks from the "wagmi" library. The interaction includes the capability to provide feedback on the transaction status when using wagmi ',(0,a.kt)("inlineCode",{parentName:"p"},"useWriteContract"),"."),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,"Here is the full code, which we will be implementing in the guide below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/ContractInteraction.tsx"',title:'"components/ContractInteraction.tsx"'},'import * as React from "react";\nimport { parseEther } from "viem";\nimport { useWriteContract } from "wagmi";\nimport DeployedContracts from "~~/contracts/deployedContracts";\nimport { useTransactor } from "~~/hooks/scaffold-eth";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync, isPending } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: "setGreeting",\n      value: parseEther("0.01"),\n      args: ["Hello world!"],\n    });\n\n  const writeTx = useTransactor();\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 });\n    } catch (e) {\n      console.log("Unexpected error in writeTx", e);\n    }\n  };\n\n  return (\n    <button className="btn btn-primary" onClick={handleSetGreeting} disabled={isPending}>\n      {isPending ? <span className="loading loading-spinner loading-sm"></span> : "Send"}\n    </button>\n  );\n};\n'))),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("h3",{id:"step-1-set-up-your-component"},"Step 1: Set Up Your Component"),(0,a.kt)("p",null,'Create a new component in the "components" folder. The component will show a button that will allow users to interact with your smart contract.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/ContractInteraction.tsx"',title:'"components/ContractInteraction.tsx"'},'import * as React from "react";\n\nexport const ContractInteraction = () => {\n  return <button>Send</button>;\n};\n')),(0,a.kt)("h3",{id:"step-2-configure-wagmis-usewritecontract-hook"},"Step 2: Configure wagmi's ",(0,a.kt)("inlineCode",{parentName:"h3"},"useWriteContract")," hook"),(0,a.kt)("p",null,"Add wagmi's ",(0,a.kt)("inlineCode",{parentName:"p"},"useWriteContract")," hook and configure ",(0,a.kt)("inlineCode",{parentName:"p"},"writeContractAsync")," with the parameters: ",(0,a.kt)("inlineCode",{parentName:"p"},"abi"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"address"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"functionName"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"args"),". Get the ABI and address of your smart contract from the DeployedContracts or you can grab it from ExternalContracts object, those will be used to set up the contract interaction."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\n// highlight-start\nimport { parseEther } from "viem";\nimport { useWriteContract } from "wagmi";\nimport DeployedContracts from "~~/contracts/deployedContracts";\n// highlight-end\n\nexport const ContractInteraction = () => {\n  // highlight-start\n  const { writeContractAsync } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: "setGreeting",\n      value: parseEther("0.01"),\n      args: ["Hello world!"],\n    });\n  // highlight-end\n  return <button>Send</button>;\n};\n')),(0,a.kt)("h3",{id:"step-3-initialize-usetransactor-hook-and-send-transaction"},"Step 3: Initialize ",(0,a.kt)("inlineCode",{parentName:"h3"},"useTransactor")," hook and send transaction"),(0,a.kt)("p",null,"Initialize the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTransactor")," hook, and use it to wrap ",(0,a.kt)("inlineCode",{parentName:"p"},"writeContractAsyncWithParams")," function which we got from ",(0,a.kt)("inlineCode",{parentName:"p"},"useWriteContract")," to show feedback transaction status to user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport { parseEther } from "viem";\nimport { useWriteContract } from "wagmi";\nimport DeployedContracts from "~~/contracts/deployedContracts";\n// highlight-start\nimport { useTransactor } from "~~/hooks/scaffold-eth";\n// highlight-end\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: "setGreeting",\n      value: parseEther("0.01"),\n      args: ["Hello world!"],\n    });\n\n  // highlight-start\n  const writeTx = useTransactor();\n  // highlight-end\n\n  // highlight-start\n  return <button onClick={() => writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 })}>Send</button>;\n  // highlight-end\n};\n')),(0,a.kt)("h3",{id:"step-4-wrap-usetransactor-in-a-handler-async-function"},"Step 4: Wrap ",(0,a.kt)("inlineCode",{parentName:"h3"},"useTransactor")," in a handler async function"),(0,a.kt)("p",null,"Wrap the ",(0,a.kt)("inlineCode",{parentName:"p"},"writeTx")," function in a handler function to start the transaction when the user clicks the button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport { parseEther } from "viem";\nimport { useWriteContract } from "wagmi";\nimport DeployedContracts from "~~/contracts/deployedContracts";\nimport { useTransactor } from "~~/hooks/scaffold-eth";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync, isPending } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n  writeContractAsync({\n    address: DeployedContracts[31337].YourContract.address,\n    abi: DeployedContracts[31337].YourContract.abi,\n    functionName: "setGreeting",\n    value: parseEther("0.01"),\n    args: ["Hello world!"],\n  });\n\n  const writeTx = useTransactor();\n\n  // highlight-start\n  const handleSetGreeting = async () => {\n    try {\n      await writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 });\n    } catch (e) {\n      console.log("Unexpected error in writeTx", e);\n    }\n  };\n  // highlight-end\n\n\n  return (\n    // highlight-start\n    <button className="btn btn-primary" onClick={handleSetGreeting}>\n      Send\n    </button>\n    // highlight-end\n  );\n\n')),(0,a.kt)("h3",{id:"step-5-bonus-adding-loading-state"},"Step 5: Bonus adding loading state"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isPending")," returned from ",(0,a.kt)("inlineCode",{parentName:"p"},"useWriteContract")," while the transaction is being mined and also ",(0,a.kt)("inlineCode",{parentName:"p"},"disable")," the button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport { parseEther } from "viem";\nimport { useWriteContract } from "wagmi";\nimport DeployedContracts from "~~/contracts/deployedContracts";\nimport { useTransactor } from "~~/hooks/scaffold-eth";\n\nexport const ContractInteraction = () => {\n  // highlight-start\n  const { writeContractAsync, isPending } = useWriteContract();\n  // highlight-end\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: "setGreeting",\n      value: parseEther("0.01"),\n      args: ["Hello world!"],\n    });\n\n  const writeTx = useTransactor();\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 });\n    } catch (e) {\n      console.log("Unexpected error in writeTx", e);\n    }\n  };\n\n  return (\n    // highlight-start\n    <button className="btn btn-primary" onClick={handleSetGreeting} disabled={isPending}>\n      {isPending ? <span className="loading loading-spinner loading-sm"></span> : "Send"}\n    </button>\n    // highlight-end\n  );\n};\n')))}u.isMDXComponent=!0}}]);